<div class="row-fluid">
          <div class="innerSpacer left">

            <div class="row-fluid">
              <div class="span12">
                <div id="introduction" class="section">
<h1>Introduction</h1>
<div id="what-is-spray" class="section">
<h2>What is <em>spray</em>?</h2>
<p><em>spray</em> is a suite of lightweight <a href="http://scala-lang.org" class="reference external">Scala</a> libraries providing client- and server-side <strong>REST</strong>/<strong>HTTP</strong> support as well
as low-level network IO on top <a href="http://akka.io" class="reference external">Akka</a>.</p>
<p>We believe that, having chosen <a href="http://scala-lang.org" class="reference external">Scala</a> (and possibly <a href="http://akka.io" class="reference external">Akka</a>) as primary tools for building software, you’ll want to rely
on their power not only in your application layer but throughout the full (JVM-level) network stack. <em>spray</em> provides
just that: a set of integrated components for all your REST/HTTP and network IO needs that let you work with idiomatic
<a href="http://scala-lang.org" class="reference external">Scala</a> (and <a href="http://akka.io" class="reference external">Akka</a>) APIs at the stack level of your choice, all implemented without any wrapping layers around “legacy”
Java libraries.</p>
</div>
<div id="principles" class="section">
<h2>Principles</h2>
<p><em>sprays</em> development is guided by the following principles:</p>
<dl class="docutils">
<dt>Fully asynchronous, non-blocking</dt>
<dd>All APIs are fully asynchronous, blocking code is avoided wherever at all possible.</dd>
<dt>Actor- and Future-based</dt>
<dd><em>spray</em> fully embraces the programming model of the platform it is built upon.
Akka Actors and Futures are key constructs of its APIs.</dd>
<dt>High-performance</dt>
<dd>Especially <em>sprays</em> low-level components are carefully crafted for excellent performance in high-load environments.</dd>
<dt>Lightweight</dt>
<dd>All dependencies are very carefully managed, <em>sprays</em> codebase itself is kept as lean as possible.</dd>
<dt>Modular</dt>
<dd>Being structured into a set of integrated but loosely coupled components your application only needs to depend onto
the parts that are actually used.</dd>
<dt>Testable</dt>
<dd>All <em>spray</em> components are structured in a way that allows for easy and convenient testing.</dd>
</dl>
</div>
<div id="modules" class="section">
<h2>Modules</h2>
<p>Currently the <em>spray</em> suite consists of these modules:</p>
<dl class="docutils">
<dt><a href="../documentation/spray-caching/#spray-caching" class="reference internal"><em>spray-caching</em></a></dt>
<dd>Fast and lightweight in-memory caching built upon <a href="http://code.google.com/p/concurrentlinkedhashmap/" class="reference external">concurrentlinkedhashmap</a> and Akka Futures.</dd>
<dt><a href="../documentation/spray-can/#spray-can" class="reference internal"><em>spray-can</em></a></dt>
<dd>A low-level, low-overhead, high-performance HTTP server and client built on top of <a href="../documentation/spray-io/#spray-io" class="reference internal"><em>spray-io</em></a>.</dd>
<dt><a href="../documentation/spray-client/#spray-client" class="reference internal"><em>spray-client</em></a></dt>
<dd>An HTTP client providing a higher-level interface than the low-level <a href="../documentation/spray-can/#spray-can" class="reference internal"><em>spray-can</em></a> <a href="../documentation/spray-can/http-client/#httpclient" class="reference internal"><em>HttpClient</em></a>,
which it builds on.</dd>
<dt><a href="../documentation/spray-http/#spray-http" class="reference internal"><em>spray-http</em></a></dt>
<dd>An immutable model of HTTP requests, responses and common headers. This module is completely stand-alone, it
neither depends on <a href="http://akka.io" class="reference external">Akka</a> nor on any other part of <em>spray</em>.</dd>
<dt><a href="../documentation/spray-httpx/#spray-httpx" class="reference internal"><em>spray-httpx</em></a></dt>
<dd>Higher-level tools for working with HTTP messages (mainly marshalling, unmarshalling and (de)compression)
that are used by both <a href="../documentation/spray-client/#spray-client" class="reference internal"><em>spray-client</em></a> as well as <a href="../documentation/spray-routing/#spray-routing" class="reference internal"><em>spray-routing</em></a>.</dd>
<dt><a href="../documentation/spray-io/#spray-io" class="reference internal"><em>spray-io</em></a></dt>
<dd>A low-level network IO layer for directly connecting Akka actors to asynchronous Java NIO sockets. It sports a
pipelined architecture including predefined reusable pipeline stages (like connection timeouts and SSL/TLS support).
We like to think of it a basic version of <a href="http://www.jboss.org/netty" class="reference external">Netty</a> for Scala.</dd>
<dt><a href="../documentation/spray-servlet/#spray-servlet" class="reference internal"><em>spray-servlet</em></a></dt>
<dd>An adapter layer providing (a subset of) the <em>spray-can</em> <a href="../documentation/spray-can/http-server/#httpserver" class="reference internal"><em>HttpServer</em></a> interface on top of the Servlet API.
Enables the use of <a href="../documentation/spray-routing/#spray-routing" class="reference internal"><em>spray-routing</em></a> in a servlet container.</dd>
<dt><a href="../documentation/spray-routing/#spray-routing" class="reference internal"><em>spray-routing</em></a></dt>
<dd>A high-level routing DSL for elegantly defining RESTful web services.</dd>
<dt><a href="../documentation/spray-testkit/#spray-testkit" class="reference internal"><em>spray-testkit</em></a></dt>
<dd>A DSL for easily testing <a href="../documentation/spray-routing/#spray-routing" class="reference internal"><em>spray-routing</em></a> services. Supports both <a href="http://scalatest.org" class="reference external">ScalaTest</a> as well as <a href="http://specs2.org" class="reference external">Specs2</a>.</dd>
<dt><a href="../documentation/spray-util/#spray-util" class="reference internal"><em>spray-util</em></a></dt>
<dd>Small utility module used by all other modules except <a href="../documentation/spray-http/#spray-http" class="reference internal"><em>spray-http</em></a>.</dd>
<dt><a href="https://github.com/spray/spray-json" class="reference external">spray-json</a></dt>
<dd>A lightweight, clean and simple JSON implementation in Scala. Because it neither depends on any other part of <em>spray</em>
nor on Akka and is only an optional dependency of <a href="../documentation/spray-client/#spray-client" class="reference internal"><em>spray-client</em></a> and <a href="../documentation/spray-httpx/#spray-httpx" class="reference internal"><em>spray-httpx</em></a> it doesn’t live in
the main <em>spray</em> repository, but rather in <a href="https://github.com/spray/spray-json" class="reference external">its own github repository</a></dd>
</dl>
</div>
<div id="philosophy" class="section">
<h2>Philosophy</h2>
<p>Since its inception in early 2011 <em>sprays</em> development has been driven with a clear focus on providing tools for
building integration layers rather than application cores. As such it regards itself as a suite of <em>libraries</em> rather
than a framework.</p>
<p>A framework, as we’d like to think of the term, gives you a “frame”, in which you build your application. It comes with
a lot of decisions already pre-made and provides a foundation including support structures, that lets you get started
and deliver results quickly. In a way a framework is like a skeleton onto which you put the “flesh” of your application
in order to have it come alive. As such frameworks work best if you choose them <em>before</em> you start application
development and try to stick to the frameworks “way of doing things” as you go along.</p>
<p>For example, if you are building a browser-facing web application it makes sense to choose a web framework and build
your application on top of it, because the “core” of the application is the interaction of a browser with your code on
the web-server. The framework makers have chosen one “proven” way of designing such applications and let you “fill in
the blanks” of a more or less flexible “application-template”. Being able to rely on “best-practice” architecture like
this can be a great asset for getting things done quickly.</p>
<p>However, if your application is not primarily a web application, because its core is not browser-interaction but
some specialized, maybe complex business service, and you are merely trying to connect it to the world via a REST/HTTP
interface, a web-framework might not be what you need. In this case the application architecture should be dictated by
what makes sense for the core, not the interface layer. Also, you probably won’t benefit of the possibly existing
browser-specific framework components, like view templating, asset management, JavaScript- and CSS
generation/manipulation/minification, localization support, AJAX support, etc.</p>
<p><em>spray</em> was designed specifically as “not-a-framework”, not because we don’t like frameworks, but for use cases where
a framework is not the right choice. <em>spray</em> is made for building integration layers based on HTTP and as such tries
to “stay on the sidelines”. Therefore you normally don’t build your application “on top of” <em>spray</em>, but you build your
application on top of whatever makes sense and use <em>spray</em> merely for the HTTP integration needs.</p>
</div>
<div id="spray-for-web-development" class="section">
<h2>spray for Web Development</h2>
<p>Even though <em>sprays</em> development focus so far has not been web applications, but HTTP-based integration
layers, you can of course use it for powering browser-based GUIs as well. The recent trend of moving web application
logic more and more away from the server and into the (JS-based) browser client as well as the increasing availability
of good SBT-plugins for things <em>spray</em> itself does not provide (like view-templating or LESS- and CoffeeScript-Support)
might even make such an approach gain attractiveness.</p>
<p>Currently a <em>spray</em>-based web development stack might consist of (a subset of) these components:</p>
<dl class="docutils">
<dt><a href="../documentation/spray-can/#spray-can" class="reference internal"><em>spray-can</em></a> <a href="../documentation/spray-can/http-server/#httpserver" class="reference internal"><em>HttpServer</em></a></dt>
<dd>The web-server. Receives HTTP request and sends out responses. Optionally terminates SSL.</dd>
<dt><a href="../documentation/spray-routing/#spray-routing" class="reference internal"><em>spray-routing</em></a></dt>
<dd>The routing layer. Handles requests depending on URI, parameters, content, etc. and (un)marshals to and from the
application-specific domain model. Forwards higher-level job requests to deeper application levels and converts
the respective results into HTTP responses. Serves static content.</dd>
<dt><a href="https://github.com/spray/sbt-revolver" class="reference external">sbt-revolver</a></dt>
<dd>SBT-plugin for hot reloading of changes to any type of sources (scala, twirl, CSS, LESS, JavaScript, CoffeeScript,
images, etc.) without the need to restart the server. Can deliver an almost “dynamic-language” type of development
experience.</dd>
<dt><a href="https://github.com/spray/twirl" class="reference external">twirl</a></dt>
<dd>SBT-plugin providing for view-templating based on the <a href="http://www.playframework.org/" class="reference external">play 2.0</a> template engine.</dd>
<dt><a href="https://github.com/softprops/less-sbt" class="reference external">less-sbt</a></dt>
<dd>SBT-plugin for compilation of <a href="http://lesscss.org/" class="reference external">LESS</a> sources to CSS.</dd>
<dt><a href="https://github.com/softprops/coffeescripted-sbt" class="reference external">coffeescripted-sbt</a></dt>
<dd>SBT-plugin for compilation of <a href="http://coffeescript.org/" class="reference external">CoffeeScript</a> sources to JavaScript.</dd>
<dt><a href="https://github.com/untyped/sbt-plugins/tree/master/sbt-js" class="reference external">sbt-js</a></dt>
<dd>SBT-plugin for Javascript and Coffeescript compilation, minification, and templating.</dd>
<dt><a href="http://slick.typesafe.com/" class="reference external">SLICK</a></dt>
<dd>Library for elegant database query and access.</dd>
<dt><a href="https://github.com/spray/spray-json" class="reference external">spray-json</a></dt>
<dd>Library for clean and idiomatic JSON reading and writing.</dd>
<dt><a href="https://github.com/sbt/sbt-assembly" class="reference external">sbt-assembly</a></dt>
<dd>SBT-plugin for single-fat-JAR-deployment.</dd>
<dt><a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/" class="reference external">A client-side frontend framework</a></dt>
<dd>One of the several established client-side JavaScript frameworks.</dd>
</dl>
<p>While a stack like this might not provide everything that a full-grown web framework can offer it could have all that’s
required for your particular application. And, because you can pick the best tool for each individual job, the resulting
application stack is a lot more flexible and possibly future-proof than any single framework.
Of course, the downside of this approach is that integrating the different components is now on your shoulders. Also,
there is no single point of contact for support and upgrades.</p>
<p>Still, combining a client-side JavaScript framework with a <em>spray</em>-based application backend could prove itself as an
interesting alternative to a “classic”, server-side web framework. We’d love to hear about your experiences in this
regard...</p>
<div id="this-site" class="section">
<h3>This Site</h3>
<p>One example of a simple website running on a <em>spray</em>-based stack is this site (<a href="http://spray.io" class="reference external">http://spray.io</a>). Here is the stack we
use for <em>spray.io</em>:</p>
<ul class="simple">
<li><a href="../documentation/spray-can/#spray-can" class="reference internal"><em>spray-can</em></a> <a href="../documentation/spray-can/http-server/#httpserver" class="reference internal"><em>HttpServer</em></a></li>
<li><a href="../documentation/spray-routing/#spray-routing" class="reference internal"><em>spray-routing</em></a></li>
<li><a href="https://github.com/spray/sbt-revolver" class="reference external">sbt-revolver</a></li>
<li><a href="https://github.com/spray/twirl" class="reference external">twirl</a></li>
<li>a custom SBT extension for compiling <a href="http://sphinx.pocoo.org/" class="reference external">Sphinx</a> sources to JSON</li>
<li><a href="https://github.com/spray/spray-json" class="reference external">spray-json</a> (for reading <a href="http://sphinx.pocoo.org/" class="reference external">Sphinx</a> output)</li>
<li><a href="https://github.com/sbt/sbt-assembly" class="reference external">sbt-assembly</a></li>
<li><a href="http://demo.pixelentity.com/?mentor_html" class="reference external">Mentor</a> (a non-free, responsive HTML5 template based on <a href="http://twitter.github.com/bootstrap/" class="reference external">Bootstrap</a>)</li>
</ul>
<p>For more details check out the route definition of this site:
<a href="https://github.com/spray/spray/blob/master/site/src/main/scala/spray/site/SiteServiceActor.scala" class="reference external">https://github.com/spray/spray/blob/master/site/src/main/scala/spray/site/SiteServiceActor.scala</a>.</p>
</div>
</div>
</div>

              </div>
            </div>

          </div>
        </div>