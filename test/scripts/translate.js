// Generated by CoffeeScript 1.6.2
(function() {
  var $autoSave, $compare, $currEditingItem, $input, $main, $original, $result, $resultText, $target, $textarea, DATA_ATTR_NAME, DATA_ORIGINAL_NAME, EDITING_CSS, EDITING_ITEM_CSS, EDITING_ITEM_SELECTOR, EDITING_SELECTOR, HOVER_CSS, cancel, compare, compareDirty, compareInterval, originalClick, originalMouseEnter, originalMouseLeave, save, selector, startEdit, stopEdit;

  DATA_ATTR_NAME = 'data-translate';

  DATA_ORIGINAL_NAME = 'data-original';

  EDITING_CSS = 'editing';

  EDITING_ITEM_CSS = 'editing-item';

  HOVER_CSS = 'hover';

  EDITING_SELECTOR = '.editing';

  EDITING_ITEM_SELECTOR = '.editing-item';

  selector = 'h1,h2,h3,h4,h5,h6,p,dt,dd,li';

  $main = $('#main');

  $original = $('#trans-original');

  $target = $('#trans-target');

  $input = $('#input');

  $textarea = $('#textarea');

  $autoSave = $('#autoSave');

  $compare = $('#compare');

  $result = $('#result');

  $resultText = $('textarea', $result);

  $currEditingItem = null;

  compareInterval = null;

  compareDirty = false;

  $(function() {
    $.get('translate.txt', function(respText, status) {
      var $content;

      $content = $('<div class="wrapper"/>').html(respText);
      $('*', $content).removeAttr('class').removeAttr('id');
      $('[href]', $content).attr('href', 'javascript://');
      $original.html($content.children());
    }, 'html');
    $original.on('click', selector, originalClick);
    $('#saveBtn').click(save);
    $('#cancelBtn').click(cancel);
    $('#showResult').click(function() {
      var $rs;

      stopEdit();
      $rs = $original.clone();
      $('#input', $rs).remove();
      $resultText.val($rs.html());
      $result.slideDown();
    });
    $('#hideResult').click(function() {
      $result.slideUp();
    });
    $compare.prop('checked', false);
    return $compare.change(function() {
      var needCompare;

      needCompare = $compare.prop('checked');
      if (needCompare && (compareInterval == null)) {
        $main.addClass('split');
        compareDirty = true;
        compare();
        compareInterval = setInterval(compare, 1000);
      } else if (!needCompare && compareInterval) {
        $main.removeClass('split');
        clearInterval(compareInterval);
        compareInterval = null;
      }
    });
  });

  save = function() {
    stopEdit(true);
    return false;
  };

  cancel = function() {
    stopEdit(false);
    return false;
  };

  startEdit = function() {
    var $current, value;

    if ($currEditingItem == null) {
      return;
    }
    $current = $currEditingItem;
    $current.addClass(EDITING_ITEM_CSS);
    $original.addClass(EDITING_CSS);
    value = $current.attr(DATA_ATTR_NAME);
    $textarea.val(value != null ? value : '');
    $current.append($input);
    $input.finish();
    $input.fadeIn();
  };

  stopEdit = function(save) {
    var $current;

    if (save == null) {
      save = true;
    }
    if ($currEditingItem == null) {
      return;
    }
    $current = $currEditingItem;
    $input.fadeOut();
    $current.removeClass(EDITING_ITEM_CSS);
    $original.removeClass(EDITING_CSS);
    if (save) {
      $current.attr(DATA_ATTR_NAME, $textarea.val());
      compareDirty = true;
    }
    $currEditingItem = null;
  };

  originalMouseEnter = function() {
    $(this).addClass(HOVER_CSS);
  };

  originalMouseLeave = function() {
    $(this).removeClass(HOVER_CSS);
  };

  originalClick = function() {
    var $this, autoSave;

    $this = $(this);
    if ($this.is($currEditingItem)) {
      return;
    }
    autoSave = $autoSave.prop('checked');
    if ($currEditingItem != null) {
      stopEdit(autoSave);
    }
    $currEditingItem = $this;
    startEdit();
  };

  compare = function() {
    var $e, $rs, elem, value, _i, _len, _ref;

    if (compareDirty) {
      $rs = $original.clone();
      $('#input', $rs).remove();
      _ref = $('[' + DATA_ATTR_NAME + ']', $rs);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        $e = $(elem);
        value = $.trim($e.attr(DATA_ATTR_NAME));
        if (value !== '') {
          $e.text(value);
        }
      }
      $target.html($rs.html());
      return compareDirty = false;
    }
  };

}).call(this);
