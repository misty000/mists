// Generated by CoffeeScript 1.6.2
(function() {
  var $, $main, $processed, $raw, ATTR_TRANSLATE_KEY, DATA_COMPARE_KEY, Editor, Parser, compare, editor, loadDoc, parser, removeCompare;

  $ = jQuery;

  ATTR_TRANSLATE_KEY = 'data-translate';

  DATA_COMPARE_KEY = 'trans-compare';

  Parser = (function() {
    function Parser() {
      var __eachCallback, __parse;

      __eachCallback = function() {
        var $contents, $this, containBlock, textNodeOnly;

        $this = $(this);
        $contents = $this.contents();
        if ($contents.length === 0) {
          return;
        }
        textNodeOnly = $contents.forall(function() {
          return this.nodeType === 3;
        });
        if (textNodeOnly) {
          $this.attr('editable', true);
          return;
        }
        containBlock = $this.children().exists(function() {
          var _ref;

          return (_ref = $(this).css('display')) === 'block' || _ref === 'list-item';
        });
        if (containBlock) {
          $contents.filter(function() {
            return this.nodeType === 3 && $.trim(this.nodeValue) !== '';
          }).wrap('<div editable=true/>');
        } else {
          if (!containBlock) {
            $this.attr('editable', true);
          }
          return;
        }
      };
      __parse = function(data) {
        var $doc;

        $doc = $('<article/>').html(data);
        $('script', $doc).remove();
        $('*', $doc).removeAttr('class').removeAttr('id').filterNot('img').foreach(__eachCallback);
        $('[editable] [editable]', $doc).removeAttr('editable');
        $(Parser.nonsupport.join(','), $doc).removeAttr('editable');
        return $doc;
      };
      this.parse = function(data) {
        return __parse(data);
      };
    }

    Parser.prototype.parse = function(data) {
      var __eachCallback, __parse;

      if (data != null) {
        return data;
      }
      __eachCallback = function() {
        var $contents, $this, containBlock, textNodeOnly;

        $this = $(this);
        $contents = $this.contents();
        if ($contents.length === 0) {
          return;
        }
        textNodeOnly = $contents.forall(function() {
          return this.nodeType === 3;
        });
        if (textNodeOnly) {
          $this.attr('editable', true);
          return;
        }
        containBlock = $this.children().exists(function() {
          var _ref;

          return (_ref = $(this).css('display')) === 'block' || _ref === 'list-item';
        });
        if (containBlock) {
          $contents.filter(function() {
            return this.nodeType === 3 && $.trim(this.nodeValue) !== '';
          }).wrap('<div editable=true/>');
        } else {
          if (!containBlock) {
            $this.attr('editable', true);
          }
          return;
        }
      };
      __parse = function(data) {
        var $doc;

        $doc = $('<article/>').html(data);
        $('script', $doc).remove();
        $('*', $doc).removeAttr('class').removeAttr('id').filterNot('img').foreach(__eachCallback);
        $('[editable] [editable]', $doc).removeAttr('editable');
        $(Parser.nonsupport.join(','), $doc).removeAttr('editable');
        return $doc;
      };
      return __parse(data);
    };

    Parser.prototype.clean = function($data) {
      var __clean;

      __clean = function($d) {
        $d.removeAttr('editable');
        return $d.removeAttr('class');
      };
      __clean($data);
      __clean($('[editable]', $data));
      __clean($('[class]', $data));
      return $data;
    };

    Parser.nonsupport = ['pre'];

    return Parser;

  })();

  Editor = (function() {
    function Editor() {
      var self;

      this.$field = $('textarea', this.$input);
      self = this;
      this.$input.on('keypress', function(e) {
        if (e.keyCode === 13 && e.ctrlKey) {
          self.hide();
          return false;
        }
        if (e.keyCode === 27) {
          return self.hide(false);
        }
      });
      this.$input.on('click', 'button', function() {
        var $this;

        $this = $(this);
        if ($this.is('.save')) {
          self.hide();
        }
        if ($this.is('.cancel')) {
          return self.hide(false);
        }
      });
    }

    Editor.prototype.$input = $('<div class="hero-unit" style="border:1px solid darkgrey; padding: 10px; position: absolute; display: none;">\n<field>\n<textarea class="input-block-level"></textarea>\n<button class="save btn btn-primary">Save (Ctrl+Enter)</button>\n<button class="cancel btn btn-danger">Cancel (Esc)</button>\n</field>\n</div>');

    Editor.prototype.$field = null;

    Editor.prototype.$currElem = null;

    Editor.prototype.save = function() {
      var val;

      if (this.$currElem == null) {
        return;
      }
      val = $.trim(this.$field.val());
      if (val === '') {
        this.$currElem.removeAttr(ATTR_TRANSLATE_KEY);
      } else {
        this.$currElem.attr(ATTR_TRANSLATE_KEY, val);
      }
      return $(editor).trigger('saved', {
        $target: this.$currElem,
        data: val
      });
    };

    Editor.prototype.show = function($elem) {
      var h, left, self, top, w, _ref;

      if (this.$currElem != null) {
        return;
      }
      if ($elem == null) {
        return;
      }
      self = this;
      if ($elem.jquery == null) {
        $elem = $($elem);
      }
      $elem.addClass('editing');
      this.$currElem = $elem;
      $(this).trigger('editing');
      w = Math.max($elem.width(), 300);
      h = $elem.height();
      _ref = $elem.offset(), left = _ref.left, top = _ref.top;
      this.$field.width(w - 35).height(h + 20).val($elem.attr(ATTR_TRANSLATE_KEY));
      this.$input.appendTo('body').slideDown(function() {
        return $(self).trigger('shown');
      }).offset({
        left: left,
        top: top + h + 5
      });
      this.$field.get(0).focus();
    };

    Editor.prototype.hide = function(save) {
      var self;

      if (save == null) {
        save = true;
      }
      if (this.$currElem != null) {
        if (save) {
          this.save();
        }
        this.$currElem.removeClass('editing');
        $(this).trigger('done');
      }
      this.$field.val('');
      self = this;
      this.$input.slideUp(function() {
        self.$input.detach();
        self.$currElem = null;
        return $(self).trigger('hidden');
      });
    };

    Editor.prototype.isEditing = function() {
      return this.$currElem != null;
    };

    return Editor;

  })();

  $main = null;

  $raw = null;

  $processed = null;

  parser = new Parser;

  editor = new Editor;

  loadDoc = function(data) {
    var doc;

    if (data == null) {
      data = null;
    }
    doc = parser.parse(data);
    return $raw.html(doc);
  };

  removeCompare = function($target) {
    var $compare;

    if ($target == null) {
      return;
    }
    if ($target.jquery == null) {
      $target = $($target);
    }
    $compare = $target.data(DATA_COMPARE_KEY);
    if ($compare != null) {
      $compare.remove();
    }
    return $target.removeData(DATA_COMPARE_KEY);
  };

  compare = function($target) {
    var $compare, h, offset, parentX, rawX, val, w;

    if ($target == null) {
      return;
    }
    if ($target.jquery == null) {
      $target = $($target);
    }
    removeCompare($target);
    val = $target.attr(ATTR_TRANSLATE_KEY);
    if (val == null) {
      return;
    }
    $compare = parser.clean($target.clone());
    $compare.appendTo($processed);
    $compare.html(val);
    $target.data(DATA_COMPARE_KEY, $compare);
    offset = $target.offset();
    rawX = $raw.offset().left;
    parentX = $processed.offset().left;
    offset.left += parentX - rawX;
    w = $target.width();
    h = $target.height();
    return $compare.width(w).height(h).offset(offset);
  };

  $(function() {
    $main = $('#main-container');
    $raw = $('#raw', $main);
    $processed = $('#processed article', $main);
    return $(editor).on('editing', function() {
      $raw.addClass('editing');
    }).on('done', function() {
      $raw.removeClass('editing');
    }).on('saved', function(e, param) {
      compare(param.$target);
    });
  });

  $(function() {
    (function() {
      var resizeTimeout;

      resizeTimeout = null;
      return $(window).on('resize', function() {
        if (resizeTimeout != null) {
          clearTimeout(resizeTimeout);
          resizeTimeout = null;
        }
        return resizeTimeout = setTimeout(function() {
          return $('[editable]', $raw).foreach(function() {
            return compare($(this));
          });
        }, 100);
      });
    })();
    $('body').on('keypress', function(e) {
      if (e.keyCode === 13 && e.ctrlKey) {
        editor.hide();
        return false;
      }
      if (e.keyCode === 27) {
        editor.hide(false);
        return false;
      }
    });
    $main.on('click', 'a', function() {
      return false;
    });
    $raw.on('click', '[editable]', function() {
      if (editor.isEditing()) {
        return;
      }
      editor.show(this);
    }).on('mouseover', '[editable]', function() {
      var _ref;

      if ((_ref = $(this).data(DATA_COMPARE_KEY)) != null) {
        _ref.addClass('hover');
      }
    }).on('mouseleave', '[editable]', function() {
      var _ref;

      if ((_ref = $(this).data(DATA_COMPARE_KEY)) != null) {
        _ref.removeClass('hover');
      }
    }).tooltip({
      selector: Parser.nonsupport.join(','),
      title: '不支持',
      container: 'body'
    });
    return $('#quit').click(function() {
      var $input, $text;

      $input = $('#input');
      $input.modal('show');
      $text = $('textarea', $input);
      $text.val('');
      return $text.get(0).focus();
    });
  });

  $(function() {
    (function() {
      var $input;

      $input = $('#input');
      return $input.on('click', 'button.btn-start', function() {
        var val;

        val = $('textarea', $input).val();
        loadDoc(val);
        $input.modal('hide');
      }).modal({
        backdrop: 'static',
        keyboard: false
      });
    });
    return $('#result').on('show', function() {
      $('textarea', this).val(parser.clean($raw.clone()).children().html());
      $('body').css('overflow', 'hidden');
    }).on('hidden', function() {
      $('body').css('overflow', 'auto');
    });
  });

  $(function() {
    return $.get('translate.txt', function(data) {
      return loadDoc(data);
    }, 'html');
  });

}).call(this);
